import { ethers } from 'ethers';
import * as fs from 'fs-extra';
import 'dotenv/config';

function getEnv() {
  const { RPC_URL, PRIVATE_KEY, PRIVATE_KEY_PASSWORD } = process.env;
  if (RPC_URL === undefined)
    throw new Error("'RPC_URL' must be defined in the environment");
  if (PRIVATE_KEY === undefined)
    throw new Error("'PRIVATE_KEY' must be defined in the environment");
  if (PRIVATE_KEY_PASSWORD === undefined)
    throw new Error(
      "'PRIVATE_KEY_PASSWORD' must be defined in the environment"
    );
  return { RPC_URL, PRIVATE_KEY, PRIVATE_KEY_PASSWORD };
}

async function main() {
  // get environment variables
  const { RPC_URL, PRIVATE_KEY_PASSWORD } = getEnv();

  // connect to the blockchain and wallet
  let provider = new ethers.providers.JsonRpcProvider(RPC_URL);
  // let wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  const encryptedJson = fs.readFileSync('./.encryptedKey.json', 'utf8');
  let wallet = ethers.Wallet.fromEncryptedJsonSync(
    encryptedJson,
    PRIVATE_KEY_PASSWORD
  );
  wallet = await wallet.connect(provider);

  // read the ABI and compiled binary
  const abi = fs.readFileSync('./SimpleStorage_sol_SimpleStorage.abi', 'utf-8');
  const binary = fs.readFileSync(
    './SimpleStorage_sol_SimpleStorage.bin',
    'utf-8'
  );

  // construct the contract factory
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);

  // deploy the contract
  console.log('Deploying, please wait...');
  const contract = await contractFactory.deploy();

  // get the first transaction's receipt
  await contract.deployTransaction.wait(1);

  // console.log("Let's deploy with only transaction data!");
  // const tx: ethers.providers.TransactionRequest = {
  //   nonce: await wallet.getTransactionCount(),
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: undefined,
  //   value: 0,
  //   data: '0x608060405234801561001057600080fd5b5061079f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec114610067578063471f7cdf146100855780636057361d146100a35780636f760f41146100bf5780638bab8dd5146100db5780639e7a13ad1461010b575b600080fd5b61006f61013c565b60405161007c919061038b565b60405180910390f35b61008d610145565b60405161009a919061038b565b60405180910390f35b6100bd60048036038101906100b891906103e6565b61014b565b005b6100d960048036038101906100d49190610559565b610155565b005b6100f560048036038101906100f091906105b5565b6101e5565b604051610102919061038b565b60405180910390f35b610125600480360381019061012091906103e6565b610213565b604051610133929190610686565b60405180910390f35b60008054905090565b60005481565b8060008190555050565b600160405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101bb9291906102cf565b505050806002836040516101cf91906106f2565b9081526020016040518091039020819055505050565b6002818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6001818154811061022357600080fd5b906000526020600020906002020160009150905080600001549080600101805461024c90610738565b80601f016020809104026020016040519081016040528092919081815260200182805461027890610738565b80156102c55780601f1061029a576101008083540402835291602001916102c5565b820191906000526020600020905b8154815290600101906020018083116102a857829003601f168201915b5050505050905082565b8280546102db90610738565b90600052602060002090601f0160209004810192826102fd5760008555610344565b82601f1061031657805160ff1916838001178555610344565b82800160010185558215610344579182015b82811115610343578251825591602001919060010190610328565b5b5090506103519190610355565b5090565b5b8082111561036e576000816000905550600101610356565b5090565b6000819050919050565b61038581610372565b82525050565b60006020820190506103a0600083018461037c565b92915050565b6000604051905090565b600080fd5b600080fd5b6103c381610372565b81146103ce57600080fd5b50565b6000813590506103e0816103ba565b92915050565b6000602082840312156103fc576103fb6103b0565b5b600061040a848285016103d1565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104668261041d565b810181811067ffffffffffffffff821117156104855761048461042e565b5b80604052505050565b60006104986103a6565b90506104a4828261045d565b919050565b600067ffffffffffffffff8211156104c4576104c361042e565b5b6104cd8261041d565b9050602081019050919050565b82818337600083830152505050565b60006104fc6104f7846104a9565b61048e565b90508281526020810184848401111561051857610517610418565b5b6105238482856104da565b509392505050565b600082601f8301126105405761053f610413565b5b81356105508482602086016104e9565b91505092915050565b600080604083850312156105705761056f6103b0565b5b600083013567ffffffffffffffff81111561058e5761058d6103b5565b5b61059a8582860161052b565b92505060206105ab858286016103d1565b9150509250929050565b6000602082840312156105cb576105ca6103b0565b5b600082013567ffffffffffffffff8111156105e9576105e86103b5565b5b6105f58482850161052b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561063857808201518184015260208101905061061d565b83811115610647576000848401525b50505050565b6000610658826105fe565b6106628185610609565b935061067281856020860161061a565b61067b8161041d565b840191505092915050565b600060408201905061069b600083018561037c565b81810360208301526106ad818461064d565b90509392505050565b600081905092915050565b60006106cc826105fe565b6106d681856106b6565b93506106e681856020860161061a565b80840191505092915050565b60006106fe82846106c1565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061075057607f821691505b60208210810361076357610762610709565b5b5091905056fea264697066735822122082feb30614a4efb75e9ae268409d1c7e96640e2822ffdba8afc30ed853fcfc4264736f6c634300080e0033',
  //   chainId: 1337,
  // };
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);

  let currentFavoriteNumber = await contract.retrieve();
  console.log(`Current Favorite Number: ${currentFavoriteNumber}`);
  console.log('Updating favorite number...');
  let transactionResponse = await contract.store(7);
  let transactionReceipt = await transactionResponse.wait();
  currentFavoriteNumber = await contract.retrieve();
  console.log(`New Favorite Number: ${currentFavoriteNumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
